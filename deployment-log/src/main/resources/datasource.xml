<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <!--<bean id="stat-filter" class="com.ibeiliao.platform.datasource.druid.SqlStatFilter">-->
    	<!--<property name="mergeSql" value="true" />-->
	    <!--<property name="slowSqlMillis" value="3000" />-->
	    <!--&lt;!&ndash; 超过该时长 发邮件通知 &ndash;&gt;-->
	    <!--<property name="slowSqlMillisEmail" value="3000" />-->
	    <!--&lt;!&ndash; 超过该时长 发短信通知 &ndash;&gt;-->
	    <!--<property name="slowSqlMillisSms" value="7000" />-->
	    <!--&lt;!&ndash; 超过该时长 拨打电话 &ndash;&gt;-->
	    <!--<property name="slowSqlMillisCall" value="10000" />-->
	    <!--&lt;!&ndash; 超时拨打电话的时间段 &ndash;&gt;-->
	    <!--<property name="callTime" value="7-24" />-->
	    <!--&lt;!&ndash; 发送警报的时间间隔，默认5分钟 &ndash;&gt;-->
	    <!--<property name="warnInterval" value="300000" />-->
	    <!--<property name="logSlowSql" value="true" />-->
	    <!--<property name="emails" value="linyi@ibeiliao.com" />-->
	    <!--<property name="mobiles" value="1862075025" />-->
	<!--</bean>-->

	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbc.url.master}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${jdbc.initialSize}" />
      <property name="minIdle" value="${jdbc.minIdle}" /> 
      <property name="maxActive" value="${jdbc.master.maxActive}" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${jdbc.maxWait}" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

      <property name="validationQuery" value="${jdbc.validationQuery}" />
      <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
      <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
      <property name="testOnReturn" value="${jdbc.testOnReturn}" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="false" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
      
      <!-- 合并多个DruidDataSource的监控数据 -->
      <property name="useGlobalDataSourceStat" value="true" />

      <!-- 配置监控统计拦截的filters -->
      <!--<property name="filters" value="${jdbc.filters}" /> -->
      <!--<property name="proxyFilters">-->
	    <!--<list>-->
            <!--<ref bean="stat-filter" />-->
        <!--</list>-->
      <!--</property>-->
    </bean>
	
	<!--<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> -->
      <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
      <!--<property name="url" value="${jdbc.url.slave}" />-->
      <!--<property name="username" value="${jdbc.username}" />-->
      <!--<property name="password" value="${jdbc.password}" />-->

            <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
      <!--<property name="initialSize" value="${jdbc.initialSize}" />-->
      <!--<property name="minIdle" value="${jdbc.minIdle}" /> -->
      <!--<property name="maxActive" value="${jdbc.slave.maxActive}" />-->

      <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
      <!--<property name="maxWait" value="${jdbc.maxWait}" />-->

      <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
      <!--<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />-->

      <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
      <!--<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />-->

      <!--<property name="validationQuery" value="${jdbc.validationQuery}" />-->
      <!--<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />-->
      <!--<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />-->
      <!--<property name="testOnReturn" value="${jdbc.testOnReturn}" />-->

      <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;-->
      <!--<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />-->
      <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />-->
      <!---->
      <!--&lt;!&ndash; 合并多个DruidDataSource的监控数据 &ndash;&gt;-->
      <!--<property name="useGlobalDataSourceStat" value="true" />-->
      <!---->
      <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
      <!--<property name="filters" value="${jdbc.filters}" /> -->
      <!--<property name="proxyFilters">-->
	    <!--<list>-->
            <!--<ref bean="stat-filter" />-->
        <!--</list>-->
      <!--</property>-->
    <!--</bean>-->
	
    <!--<bean id="multiDataSource" class="com.beiliao.shared.datasource.MultiDataSource">-->
		<!--<property name="masterDataSource" ref="masterDataSource" />-->
		<!--<property name="slaveDataSource" ref="slaveDataSource" />-->
	<!--</bean>-->
       
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="masterDataSource" />
        <property name="typeAliasesPackage" value="com.ibeiliao.deployment.log"/>
        <property name="configLocation" value="classpath:/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:/mybatis/*.xml" />
    </bean> 
    
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.ibeiliao.platform.admin.dao"/>
        <property name="annotationClass" value="com.ibeiliao.platform.database.MyBatisDao"/>
    </bean>
    
    <!-- datasource 事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<constructor-arg ref="masterDataSource" />
	</bean>


	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
</beans>