<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
  	<!-- 启用注解支持，让DispatcherServlet使用AnnotationMethodHandlerAdapter对Controller方法进行调用和处理 --> 
	
	<!--配置视图解析器-->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>  
    	<property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->
		<property name="viewClass">
			<value>org.springframework.web.servlet.view.InternalResourceView</value>
		</property>
	</bean>  
    <!-- 上传文件配置 -->
    <!--
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" p:defaultEncoding="utf-8" >
		<property name="maxUploadSize" value="2097152"></property>
		<property name="maxInMemorySize" value="65536"></property>
	</bean>
    -->
	<!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<!-- <property name="validationMessageSource" ref="messageSource"/> -->
	</bean>

	<mvc:annotation-driven validator="validator"/>
	<!-- 在使用了restful风格的URL时，启用default servlet，让容器可以处理静态文件 -->
	<mvc:default-servlet-handler/>

  	<!-- -->
	<context:annotation-config/>
	 

	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    	<property name="order" value="0" />
  	</bean>
  	
  	<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
    	<property name="order" value="1" />
  	</bean>
  	
	<!-- 
	处理器-适配器，AnnotationMethodHandlerAdapter负责调用我们的Controller方法。
	如果发现方法上标有@ResponseBody，则遍历messageConverters，找到适合的一个Converter，
	由此Converter将Controller方法返回值直接输出到response响应体。
	-->
	<bean id="handlerAdapter" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="cacheSeconds" value="0" />
	 	<property name="messageConverters" ref="messageConverters"/>
	</bean>
  

	<!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->

    <!-- Controller返回 对象自动转换成json -->
    <util:list id="messageConverters"> 
		<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
			<property name="supportedMediaTypes">
				<list>
					<value>application/json</value>  
	                <value>application/javascript</value>  
	                <value>text/json</value>  
	                <value>text/javascript</value>
				</list>
			</property>
		</bean>
    </util:list>
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:resources/message/message" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean> 
	


	<!-- 英文;隔开多个package -->
    <context:component-scan base-package="com.ibeiliao.deployment.log.controller">
		<!-- <context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect" /> -->
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

</beans>
